version: '3.8'

services:
  # Development container with all Node.js tools
  dev-workspace:
    build:
      context: .
      dockerfile: docker/development/Dockerfile.dev
    container_name: price-tracker-dev
    working_dir: /workspace
    volumes:
      # Mount entire project directory
      - .:/workspace
      # Named volume for node_modules to improve performance
      #- node_modules_backend:/workspace/backend/node_modules
      #- node_modules_frontend:/workspace/frontend/node_modules
      # Mount Docker socket for Docker-in-Docker scenarios
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "3000:3000"   # Angular development server
      - "4000:4000"   # NestJS API server
      - "4200:4200"   # Alternative Angular port
      - "9229:9229"   # Node.js debugging port
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DB_HOST=${DB_HOST:-postgres}
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=${DB_NAME:-pricetracker_dev}
      - DB_USER=${DB_USER:-devuser}
      - DB_PASSWORD=${DB_PASSWORD:-devpass123}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=${PUPPETEER_SKIP_CHROMIUM_DOWNLOAD:-true}
      - PUPPETEER_EXECUTABLE_PATH=${PUPPETEER_EXECUTABLE_PATH:-/usr/bin/google-chrome}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - price-tracker-network
    command: tail -f /dev/null

  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: price-tracker-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-pricetracker_dev}
      POSTGRES_USER: ${DB_USER:-devuser}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-devpass123}
      POSTGRES_INITDB_ARGS: ${POSTGRES_INITDB_ARGS:---encoding=UTF8 --lc-collate=C --lc-ctype=C}
    ports:
      - "5433:5432"  # External port to avoid conflicts
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U devuser -d pricetracker_dev" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - price-tracker-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: price-tracker-redis
    ports:
      - "6380:6379"  # External port to avoid conflicts
    volumes:
      - redis_data:/data
      - ./docker/development/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - price-tracker-network

  # Adminer for database management
  adminer:
    image: adminer:latest
    container_name: price-tracker-adminer
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=${DB_HOST:-postgres}
    depends_on:
      - postgres
    networks:
      - price-tracker-network

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: price-tracker-redis-commander
    environment:
      - REDIS_HOSTS=local:${REDIS_HOSTS:-redis}:${REDIS_PORT:-6379}
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - price-tracker-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  node_modules_backend:
    driver: local
  node_modules_frontend:
    driver: local

networks:
  price-tracker-network:
    driver: bridge